{
  "version": 3,
  "sources": ["../../../src/js/util/util.js", "../../../src/js/core/eventable.js", "../../../src/js/slide/placeholder.js", "../../../src/js/slide/content.js", "../../../src/js/util/viewport-size.js", "../../../src/js/slide/zoom-level.js", "../../../src/js/slide/loader.js", "../../../src/js/core/base.js", "../../../src/js/lightbox/lightbox.js"],
  "sourcesContent": ["/** @typedef {import('../photoswipe.js').Point} Point */\r\n\r\n/**\r\n * @template {keyof HTMLElementTagNameMap} T\r\n * @param {string} className\r\n * @param {T} tagName\r\n * @param {Node} [appendToEl]\r\n * @returns {HTMLElementTagNameMap[T]}\r\n */\r\nexport function createElement(className, tagName, appendToEl) {\r\n  const el = document.createElement(tagName);\r\n  if (className) {\r\n    el.className = className;\r\n  }\r\n  if (appendToEl) {\r\n    appendToEl.appendChild(el);\r\n  }\r\n  return el;\r\n}\r\n\r\n/**\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {Point}\r\n */\r\nexport function equalizePoints(p1, p2) {\r\n  p1.x = p2.x;\r\n  p1.y = p2.y;\r\n  if (p2.id !== undefined) {\r\n    p1.id = p2.id;\r\n  }\r\n  return p1;\r\n}\r\n\r\n/**\r\n * @param {Point} p\r\n */\r\nexport function roundPoint(p) {\r\n  p.x = Math.round(p.x);\r\n  p.y = Math.round(p.y);\r\n}\r\n\r\n/**\r\n * Returns distance between two points.\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {number}\r\n */\r\nexport function getDistanceBetween(p1, p2) {\r\n  const x = Math.abs(p1.x - p2.x);\r\n  const y = Math.abs(p1.y - p2.y);\r\n  return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * Whether X and Y positions of points are equal\r\n *\r\n * @param {Point} p1\r\n * @param {Point} p2\r\n * @returns {boolean}\r\n */\r\nexport function pointsEqual(p1, p2) {\r\n  return p1.x === p2.x && p1.y === p2.y;\r\n}\r\n\r\n/**\r\n * The float result between the min and max values.\r\n *\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @returns {number}\r\n */\r\nexport function clamp(val, min, max) {\r\n  return Math.min(Math.max(val, min), max);\r\n}\r\n\r\n/**\r\n * Get transform string\r\n *\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n * @returns {string}\r\n */\r\nexport function toTransformString(x, y, scale) {\r\n  let propValue = `translate3d(${x}px,${y || 0}px,0)`;\r\n\r\n  if (scale !== undefined) {\r\n    propValue += ` scale3d(${scale},${scale},1)`;\r\n  }\r\n\r\n  return propValue;\r\n}\r\n\r\n/**\r\n * Apply transform:translate(x, y) scale(scale) to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {number} x\r\n * @param {number} [y]\r\n * @param {number} [scale]\r\n */\r\nexport function setTransform(el, x, y, scale) {\r\n  el.style.transform = toTransformString(x, y, scale);\r\n}\r\n\r\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\r\n\r\n/**\r\n * Apply CSS transition to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string} [prop] CSS property to animate\r\n * @param {number} [duration] in ms\r\n * @param {string} [ease] CSS easing function\r\n */\r\nexport function setTransitionStyle(el, prop, duration, ease) {\r\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\r\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\r\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\r\n  el.style.transition = prop\r\n    ? `${prop} ${duration}ms ${ease || defaultCSSEasing}`\r\n    : 'none';\r\n}\r\n\r\n/**\r\n * Apply width and height CSS properties to element\r\n *\r\n * @param {HTMLElement} el\r\n * @param {string | number} w\r\n * @param {string | number} h\r\n */\r\nexport function setWidthHeight(el, w, h) {\r\n  el.style.width = (typeof w === 'number') ? `${w}px` : w;\r\n  el.style.height = (typeof h === 'number') ? `${h}px` : h;\r\n}\r\n\r\n/**\r\n * @param {HTMLElement} el\r\n */\r\nexport function removeTransitionStyle(el) {\r\n  setTransitionStyle(el);\r\n}\r\n\r\n/**\r\n * @param {HTMLImageElement} img\r\n * @returns {Promise<HTMLImageElement | void>}\r\n */\r\nexport function decodeImage(img) {\r\n  if ('decode' in img) {\r\n    return img.decode().catch(() => {});\r\n  }\r\n\r\n  if (img.complete) {\r\n    return Promise.resolve(img);\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    img.onload = () => resolve(img);\r\n    img.onerror = reject;\r\n  });\r\n}\r\n\r\n/** @typedef {LOAD_STATE[keyof LOAD_STATE]} LoadState */\r\n/** @type {{ IDLE: 'idle'; LOADING: 'loading'; LOADED: 'loaded'; ERROR: 'error' }} */\r\nexport const LOAD_STATE = {\r\n  IDLE: 'idle',\r\n  LOADING: 'loading',\r\n  LOADED: 'loaded',\r\n  ERROR: 'error',\r\n};\r\n\r\n\r\n/**\r\n * Check if click or keydown event was dispatched\r\n * with a special key or via mouse wheel.\r\n *\r\n * @param {MouseEvent | KeyboardEvent} e\r\n * @returns {boolean}\r\n */\r\nexport function specialKeyUsed(e) {\r\n  return ('button' in e && e.button === 1) || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey;\r\n}\r\n\r\n/**\r\n * Parse `gallery` or `children` options.\r\n *\r\n * @param {import('../photoswipe.js').ElementProvider} [option]\r\n * @param {string} [legacySelector]\r\n * @param {HTMLElement | Document} [parent]\r\n * @returns HTMLElement[]\r\n */\r\nexport function getElementsFromOption(option, legacySelector, parent = document) {\r\n  /** @type {HTMLElement[]} */\r\n  let elements = [];\r\n\r\n  if (option instanceof Element) {\r\n    elements = [option];\r\n  } else if (option instanceof NodeList || Array.isArray(option)) {\r\n    elements = Array.from(option);\r\n  } else {\r\n    const selector = typeof option === 'string' ? option : legacySelector;\r\n    if (selector) {\r\n      elements = Array.from(parent.querySelectorAll(selector));\r\n    }\r\n  }\r\n\r\n  return elements;\r\n}\r\n\r\n/**\r\n * Check if variable is PhotoSwipe class\r\n *\r\n * @param {any} fn\r\n * @returns {boolean}\r\n */\r\nexport function isPswpClass(fn) {\r\n  return typeof fn === 'function'\r\n    && fn.prototype\r\n    && fn.prototype.goTo;\r\n}\r\n\r\n/**\r\n * Check if browser is Safari\r\n *\r\n * @returns {boolean}\r\n */\r\nexport function isSafari() {\r\n  return !!(navigator.vendor && navigator.vendor.match(/apple/i));\r\n}\r\n\r\n", "/** @typedef {import('../lightbox/lightbox.js').default} PhotoSwipeLightbox */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../ui/ui-element.js').UIElementData} UIElementData */\r\n/** @typedef {import('../slide/content.js').default} ContentDefault */\r\n/** @typedef {import('../slide/slide.js').default} Slide */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n/** @typedef {import('../slide/zoom-level.js').default} ZoomLevel */\r\n/** @typedef {import('../slide/get-thumb-bounds.js').Bounds} Bounds */\r\n\r\n/**\r\n * Allow adding an arbitrary props to the Content\r\n * https://photoswipe.com/custom-content/#using-webp-image-format\r\n * @typedef {ContentDefault & Record<string, any>} Content\r\n */\r\n/** @typedef {{ x?: number; y?: number }} Point */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeEventsMap https://photoswipe.com/events/\r\n *\r\n *\r\n * https://photoswipe.com/adding-ui-elements/\r\n *\r\n * @prop {undefined} uiRegister\r\n * @prop {{ data: UIElementData }} uiElementCreate\r\n *\r\n *\r\n * https://photoswipe.com/events/#initialization-events\r\n *\r\n * @prop {undefined} beforeOpen\r\n * @prop {undefined} firstUpdate\r\n * @prop {undefined} initialLayout\r\n * @prop {undefined} change\r\n * @prop {undefined} afterInit\r\n * @prop {undefined} bindEvents\r\n *\r\n *\r\n * https://photoswipe.com/events/#opening-or-closing-transition-events\r\n *\r\n * @prop {undefined} openingAnimationStart\r\n * @prop {undefined} openingAnimationEnd\r\n * @prop {undefined} closingAnimationStart\r\n * @prop {undefined} closingAnimationEnd\r\n *\r\n *\r\n * https://photoswipe.com/events/#closing-events\r\n *\r\n * @prop {undefined} close\r\n * @prop {undefined} destroy\r\n *\r\n *\r\n * https://photoswipe.com/events/#pointer-and-gesture-events\r\n *\r\n * @prop {{ originalEvent: PointerEvent }} pointerDown\r\n * @prop {{ originalEvent: PointerEvent }} pointerMove\r\n * @prop {{ originalEvent: PointerEvent }} pointerUp\r\n * @prop {{ bgOpacity: number }} pinchClose can be default prevented\r\n * @prop {{ panY: number }} verticalDrag can be default prevented\r\n *\r\n *\r\n * https://photoswipe.com/events/#slide-content-events\r\n *\r\n * @prop {{ content: Content }} contentInit\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoad can be default prevented\r\n * @prop {{ content: Content; isLazy: boolean }} contentLoadImage can be default prevented\r\n * @prop {{ content: Content; slide: Slide; isError?: boolean }} loadComplete\r\n * @prop {{ content: Content; slide: Slide }} loadError\r\n * @prop {{ content: Content; width: number; height: number }} contentResize can be default prevented\r\n * @prop {{ content: Content; width: number; height: number; slide: Slide }} imageSizeChange\r\n * @prop {{ content: Content }} contentLazyLoad can be default prevented\r\n * @prop {{ content: Content }} contentAppend can be default prevented\r\n * @prop {{ content: Content }} contentActivate can be default prevented\r\n * @prop {{ content: Content }} contentDeactivate can be default prevented\r\n * @prop {{ content: Content }} contentRemove can be default prevented\r\n * @prop {{ content: Content }} contentDestroy can be default prevented\r\n *\r\n *\r\n * undocumented\r\n *\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} imageClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} bgClickAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} tapAction can be default prevented\r\n * @prop {{ point: Point; originalEvent: PointerEvent }} doubleTapAction can be default prevented\r\n *\r\n * @prop {{ originalEvent: KeyboardEvent }} keydown can be default prevented\r\n * @prop {{ x: number; dragging: boolean }} moveMainScroll\r\n * @prop {{ slide: Slide }} firstZoomPan\r\n * @prop {{ slide: Slide | undefined, data: SlideData, index: number }} gettingData\r\n * @prop {undefined} beforeResize\r\n * @prop {undefined} resize\r\n * @prop {undefined} viewportSize\r\n * @prop {undefined} updateScrollOffset\r\n * @prop {{ slide: Slide }} slideInit\r\n * @prop {{ slide: Slide }} afterSetContent\r\n * @prop {{ slide: Slide }} slideLoad\r\n * @prop {{ slide: Slide }} appendHeavy can be default prevented\r\n * @prop {{ slide: Slide }} appendHeavyContent\r\n * @prop {{ slide: Slide }} slideActivate\r\n * @prop {{ slide: Slide }} slideDeactivate\r\n * @prop {{ slide: Slide }} slideDestroy\r\n * @prop {{ destZoomLevel: number, centerPoint: Point | undefined, transitionDuration: number | false | undefined }} beforeZoomTo\r\n * @prop {{ slide: Slide }} zoomPanUpdate\r\n * @prop {{ slide: Slide }} initialZoomPan\r\n * @prop {{ slide: Slide }} calcSlideSize\r\n * @prop {undefined} resolutionChanged\r\n * @prop {{ originalEvent: WheelEvent }} wheel can be default prevented\r\n * @prop {{ content: Content }} contentAppendImage can be default prevented\r\n * @prop {{ index: number; itemData: SlideData }} lazyLoadSlide can be default prevented\r\n * @prop {undefined} lazyLoad\r\n * @prop {{ slide: Slide }} calcBounds\r\n * @prop {{ zoomLevels: ZoomLevel, slideData: SlideData }} zoomLevelsUpdate\r\n *\r\n *\r\n * legacy\r\n *\r\n * @prop {undefined} init\r\n * @prop {undefined} initialZoomIn\r\n * @prop {undefined} initialZoomOut\r\n * @prop {undefined} initialZoomInEnd\r\n * @prop {undefined} initialZoomOutEnd\r\n * @prop {{ dataSource: DataSource | undefined, numItems: number }} numItems\r\n * @prop {{ itemData: SlideData; index: number }} itemData\r\n * @prop {{ index: number, itemData: SlideData, instance: PhotoSwipe }} thumbBounds\r\n */\r\n\r\n/**\r\n * @typedef {Object} PhotoSwipeFiltersMap https://photoswipe.com/filters/\r\n *\r\n * @prop {(numItems: number, dataSource: DataSource | undefined) => number} numItems\r\n * Modify the total amount of slides. Example on Data sources page.\r\n * https://photoswipe.com/filters/#numitems\r\n *\r\n * @prop {(itemData: SlideData, index: number) => SlideData} itemData\r\n * Modify slide item data. Example on Data sources page.\r\n * https://photoswipe.com/filters/#itemdata\r\n *\r\n * @prop {(itemData: SlideData, element: HTMLElement, linkEl: HTMLAnchorElement) => SlideData} domItemData\r\n * Modify item data when it's parsed from DOM element. Example on Data sources page.\r\n * https://photoswipe.com/filters/#domitemdata\r\n *\r\n * @prop {(clickedIndex: number, e: MouseEvent, instance: PhotoSwipeLightbox) => number} clickedIndex\r\n * Modify clicked gallery item index.\r\n * https://photoswipe.com/filters/#clickedindex\r\n *\r\n * @prop {(placeholderSrc: string | false, content: Content) => string | false} placeholderSrc\r\n * Modify placeholder image source.\r\n * https://photoswipe.com/filters/#placeholdersrc\r\n *\r\n * @prop {(isContentLoading: boolean, content: Content) => boolean} isContentLoading\r\n * Modify if the content is currently loading.\r\n * https://photoswipe.com/filters/#iscontentloading\r\n *\r\n * @prop {(isContentZoomable: boolean, content: Content) => boolean} isContentZoomable\r\n * Modify if the content can be zoomed.\r\n * https://photoswipe.com/filters/#iscontentzoomable\r\n *\r\n * @prop {(useContentPlaceholder: boolean, content: Content) => boolean} useContentPlaceholder\r\n * Modify if the placeholder should be used for the content.\r\n * https://photoswipe.com/filters/#usecontentplaceholder\r\n *\r\n * @prop {(isKeepingPlaceholder: boolean, content: Content) => boolean} isKeepingPlaceholder\r\n * Modify if the placeholder should be kept after the content is loaded.\r\n * https://photoswipe.com/filters/#iskeepingplaceholder\r\n *\r\n *\r\n * @prop {(contentErrorElement: HTMLElement, content: Content) => HTMLElement} contentErrorElement\r\n * Modify an element when the content has error state (for example, if image cannot be loaded).\r\n * https://photoswipe.com/filters/#contenterrorelement\r\n *\r\n * @prop {(element: HTMLElement, data: UIElementData) => HTMLElement} uiElement\r\n * Modify a UI element that's being created.\r\n * https://photoswipe.com/filters/#uielement\r\n *\r\n * @prop {(thumbnail: HTMLElement | null | undefined, itemData: SlideData, index: number) => HTMLElement} thumbEl\r\n * Modify the thubmnail element from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbel\r\n *\r\n * @prop {(thumbBounds: Bounds | undefined, itemData: SlideData, index: number) => Bounds} thumbBounds\r\n * Modify the thubmnail bounds from which opening zoom animation starts or ends.\r\n * https://photoswipe.com/filters/#thumbbounds\r\n *\r\n * @prop {(srcsetSizesWidth: number, content: Content) => number} srcsetSizesWidth\r\n *\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeFiltersMap} T\r\n * @typedef {{ fn: PhotoSwipeFiltersMap[T], priority: number }} Filter\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {PhotoSwipeEventsMap[T] extends undefined ? PhotoSwipeEvent<T> : PhotoSwipeEvent<T> & PhotoSwipeEventsMap[T]} AugmentedEvent\r\n */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {(event: AugmentedEvent<T>) => void} EventCallback\r\n */\r\n\r\n/**\r\n * Base PhotoSwipe event object\r\n *\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n */\r\nclass PhotoSwipeEvent {\r\n  /**\r\n   * @param {T} type\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   */\r\n  constructor(type, details) {\r\n    this.type = type;\r\n    this.defaultPrevented = false;\r\n    if (details) {\r\n      Object.assign(this, details);\r\n    }\r\n  }\r\n\r\n  preventDefault() {\r\n    this.defaultPrevented = true;\r\n  }\r\n}\r\n\r\n/**\r\n * PhotoSwipe base class that can listen and dispatch for events.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\r\n */\r\nclass Eventable {\r\n  constructor() {\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeEventsMap]?: ((event: AugmentedEvent<T>) => void)[] }}\r\n     */\r\n    this._listeners = {};\r\n\r\n    /**\r\n     * @type {{ [T in keyof PhotoSwipeFiltersMap]?: Filter<T>[] }}\r\n     */\r\n    this._filters = {};\r\n\r\n    /** @type {PhotoSwipe | undefined} */\r\n    this.pswp = undefined;\r\n\r\n    /** @type {PhotoSwipeOptions | undefined} */\r\n    this.options = undefined;\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   * @param {number} priority\r\n   */\r\n  addFilter(name, fn, priority = 100) {\r\n    if (!this._filters[name]) {\r\n      this._filters[name] = [];\r\n    }\r\n\r\n    this._filters[name]?.push({ fn, priority });\r\n    this._filters[name]?.sort((f1, f2) => f1.priority - f2.priority);\r\n\r\n    this.pswp?.addFilter(name, fn, priority);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeFiltersMap[T]} fn\r\n   */\r\n  removeFilter(name, fn) {\r\n    if (this._filters[name]) {\r\n      // @ts-expect-error\r\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\r\n    }\r\n\r\n    if (this.pswp) {\r\n      this.pswp.removeFilter(name, fn);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeFiltersMap} T\r\n   * @param {T} name\r\n   * @param {Parameters<PhotoSwipeFiltersMap[T]>} args\r\n   * @returns {Parameters<PhotoSwipeFiltersMap[T]>[0]}\r\n   */\r\n  applyFilters(name, ...args) {\r\n    this._filters[name]?.forEach((filter) => {\r\n      // @ts-expect-error\r\n      args[0] = filter.fn.apply(this, args);\r\n    });\r\n    return args[0];\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  on(name, fn) {\r\n    if (!this._listeners[name]) {\r\n      this._listeners[name] = [];\r\n    }\r\n    this._listeners[name]?.push(fn);\r\n\r\n    // When binding events to lightbox,\r\n    // also bind events to PhotoSwipe Core,\r\n    // if it's open.\r\n    this.pswp?.on(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {EventCallback<T>} fn\r\n   */\r\n  off(name, fn) {\r\n    if (this._listeners[name]) {\r\n      // @ts-expect-error\r\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\r\n    }\r\n\r\n    this.pswp?.off(name, fn);\r\n  }\r\n\r\n  /**\r\n   * @template {keyof PhotoSwipeEventsMap} T\r\n   * @param {T} name\r\n   * @param {PhotoSwipeEventsMap[T]} [details]\r\n   * @returns {AugmentedEvent<T>}\r\n   */\r\n  dispatch(name, details) {\r\n    if (this.pswp) {\r\n      return this.pswp.dispatch(name, details);\r\n    }\r\n\r\n    const event = /** @type {AugmentedEvent<T>} */ (new PhotoSwipeEvent(name, details));\r\n\r\n    this._listeners[name]?.forEach((listener) => {\r\n      listener.call(this, event);\r\n    });\r\n\r\n    return event;\r\n  }\r\n}\r\n\r\nexport default Eventable;\r\n", "import { createElement, setWidthHeight, toTransformString } from '../util/util.js';\r\n\r\nclass Placeholder {\r\n  /**\r\n   * @param {string | false} imageSrc\r\n   * @param {HTMLElement} container\r\n   */\r\n  constructor(imageSrc, container) {\r\n    // Create placeholder\r\n    // (stretched thumbnail or simple div behind the main image)\r\n    /** @type {HTMLImageElement | HTMLDivElement | null} */\r\n    this.element = createElement(\r\n      'pswp__img pswp__img--placeholder',\r\n      imageSrc ? 'img' : 'div',\r\n      container\r\n    );\r\n\r\n    if (imageSrc) {\r\n      const imgEl = /** @type {HTMLImageElement} */ (this.element);\r\n      imgEl.decoding = 'async';\r\n      imgEl.alt = '';\r\n      imgEl.src = imageSrc;\r\n      imgEl.setAttribute('role', 'presentation');\r\n    }\r\n\r\n    this.element.setAttribute('aria-hidden', 'true');\r\n  }\r\n\r\n  /**\r\n   * @param {number} width\r\n   * @param {number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.element.tagName === 'IMG') {\r\n      // Use transform scale() to modify img placeholder size\r\n      // (instead of changing width/height directly).\r\n      // This helps with performance, specifically in iOS15 Safari.\r\n      setWidthHeight(this.element, 250, 'auto');\r\n      this.element.style.transformOrigin = '0 0';\r\n      this.element.style.transform = toTransformString(0, 0, width / 250);\r\n    } else {\r\n      setWidthHeight(this.element, width, height);\r\n    }\r\n  }\r\n\r\n  destroy() {\r\n    if (this.element?.parentNode) {\r\n      this.element.remove();\r\n    }\r\n    this.element = null;\r\n  }\r\n}\r\n\r\nexport default Placeholder;\r\n", "import { createElement, isSafari, LOAD_STATE, setWidthHeight } from '../util/util.js';\r\nimport Placeholder from './placeholder.js';\r\n\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../util/util.js').LoadState} LoadState */\r\n\r\nclass Content {\r\n  /**\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n   * @param {number} index\r\n   */\r\n  constructor(itemData, instance, index) {\r\n    this.instance = instance;\r\n    this.data = itemData;\r\n    this.index = index;\r\n\r\n    /** @type {HTMLImageElement | HTMLDivElement | undefined} */\r\n    this.element = undefined;\r\n    /** @type {Placeholder | undefined} */\r\n    this.placeholder = undefined;\r\n    /** @type {Slide | undefined} */\r\n    this.slide = undefined;\r\n\r\n    this.displayedImageWidth = 0;\r\n    this.displayedImageHeight = 0;\r\n\r\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\r\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\r\n\r\n    this.isAttached = false;\r\n    this.hasSlide = false;\r\n    this.isDecoding = false;\r\n    /** @type {LoadState} */\r\n    this.state = LOAD_STATE.IDLE;\r\n\r\n    if (this.data.type) {\r\n      this.type = this.data.type;\r\n    } else if (this.data.src) {\r\n      this.type = 'image';\r\n    } else {\r\n      this.type = 'html';\r\n    }\r\n\r\n    this.instance.dispatch('contentInit', { content: this });\r\n  }\r\n\r\n  removePlaceholder() {\r\n    if (this.placeholder && !this.keepPlaceholder()) {\r\n      // With delay, as image might be loaded, but not rendered\r\n      setTimeout(() => {\r\n        if (this.placeholder) {\r\n          this.placeholder.destroy();\r\n          this.placeholder = undefined;\r\n        }\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload content\r\n   *\r\n   * @param {boolean} isLazy\r\n   * @param {boolean} [reload]\r\n   */\r\n  load(isLazy, reload) {\r\n    if (this.slide && this.usePlaceholder()) {\r\n      if (!this.placeholder) {\r\n        const placeholderSrc = this.instance.applyFilters(\r\n          'placeholderSrc',\r\n          // use  image-based placeholder only for the first slide,\r\n          // as rendering (even small stretched thumbnail) is an expensive operation\r\n          (this.data.msrc && this.slide.isFirstSlide) ? this.data.msrc : false,\r\n          this\r\n        );\r\n        this.placeholder = new Placeholder(\r\n          placeholderSrc,\r\n          this.slide.container\r\n        );\r\n      } else {\r\n        const placeholderEl = this.placeholder.element;\r\n        // Add placeholder to DOM if it was already created\r\n        if (placeholderEl && !placeholderEl.parentElement) {\r\n          this.slide.container.prepend(placeholderEl);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.element && !reload) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentLoad', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent()) {\r\n      this.element = createElement('pswp__img', 'img');\r\n      // Start loading only after width is defined, as sizes might depend on it.\r\n      // Due to Safari feature, we must define sizes before srcset.\r\n      if (this.displayedImageWidth) {\r\n        this.loadImage(isLazy);\r\n      }\r\n    } else {\r\n      this.element = createElement('pswp__content', 'div');\r\n      this.element.innerHTML = this.data.html || '';\r\n    }\r\n\r\n    if (reload && this.slide) {\r\n      this.slide.updateContentSize(true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preload image\r\n   *\r\n   * @param {boolean} isLazy\r\n   */\r\n  loadImage(isLazy) {\r\n    if (!this.isImageContent()\r\n      || !this.element\r\n      || this.instance.dispatch('contentLoadImage', { content: this, isLazy }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const imageElement = /** @type HTMLImageElement */ (this.element);\r\n\r\n    this.updateSrcsetSizes();\r\n\r\n    if (this.data.srcset) {\r\n      imageElement.srcset = this.data.srcset;\r\n    }\r\n\r\n    imageElement.src = this.data.src ?? '';\r\n    imageElement.alt = this.data.alt ?? '';\r\n\r\n    this.state = LOAD_STATE.LOADING;\r\n\r\n    if (imageElement.complete) {\r\n      this.onLoaded();\r\n    } else {\r\n      imageElement.onload = () => {\r\n        this.onLoaded();\r\n      };\r\n\r\n      imageElement.onerror = () => {\r\n        this.onError();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign slide to content\r\n   *\r\n   * @param {Slide} slide\r\n   */\r\n  setSlide(slide) {\r\n    this.slide = slide;\r\n    this.hasSlide = true;\r\n    this.instance = slide.pswp;\r\n\r\n    // todo: do we need to unset slide?\r\n  }\r\n\r\n  /**\r\n   * Content load success handler\r\n   */\r\n  onLoaded() {\r\n    this.state = LOAD_STATE.LOADED;\r\n\r\n    if (this.slide && this.element) {\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, content: this });\r\n\r\n      // if content is reloaded\r\n      if (this.slide.isActive\r\n          && this.slide.heavyAppended\r\n          && !this.element.parentNode) {\r\n        this.append();\r\n        this.slide.updateContentSize(true);\r\n      }\r\n\r\n      if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n        this.removePlaceholder();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Content load error handler\r\n   */\r\n  onError() {\r\n    this.state = LOAD_STATE.ERROR;\r\n\r\n    if (this.slide) {\r\n      this.displayError();\r\n      this.instance.dispatch('loadComplete', { slide: this.slide, isError: true, content: this });\r\n      this.instance.dispatch('loadError', { slide: this.slide, content: this });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is currently loading\r\n   */\r\n  isLoading() {\r\n    return this.instance.applyFilters(\r\n      'isContentLoading',\r\n      this.state === LOAD_STATE.LOADING,\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @returns {Boolean} If the content is in error state\r\n   */\r\n  isError() {\r\n    return this.state === LOAD_STATE.ERROR;\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content is image\r\n   */\r\n  isImageContent() {\r\n    return this.type === 'image';\r\n  }\r\n\r\n  /**\r\n   * Update content size\r\n   *\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  setDisplayedSize(width, height) {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.setDisplayedSize(width, height);\r\n    }\r\n\r\n    if (this.instance.dispatch(\r\n      'contentResize',\r\n      { content: this, width, height }).defaultPrevented\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    setWidthHeight(this.element, width, height);\r\n\r\n    if (this.isImageContent() && !this.isError()) {\r\n      const isInitialSizeUpdate = (!this.displayedImageWidth && width);\r\n\r\n      this.displayedImageWidth = width;\r\n      this.displayedImageHeight = height;\r\n\r\n      if (isInitialSizeUpdate) {\r\n        this.loadImage(false);\r\n      } else {\r\n        this.updateSrcsetSizes();\r\n      }\r\n\r\n      if (this.slide) {\r\n        this.instance.dispatch(\r\n          'imageSizeChange',\r\n          { slide: this.slide, width, height, content: this }\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If the content can be zoomed\r\n   */\r\n  isZoomable() {\r\n    return this.instance.applyFilters(\r\n      'isContentZoomable',\r\n      this.isImageContent() && (this.state !== LOAD_STATE.ERROR),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update image srcset sizes attribute based on width and height\r\n   */\r\n  updateSrcsetSizes() {\r\n    // Handle srcset sizes attribute.\r\n    //\r\n    // Never lower quality, if it was increased previously.\r\n    // Chrome does this automatically, Firefox and Safari do not,\r\n    // so we store largest used size in dataset.\r\n    if (!this.isImageContent() || !this.element || !this.data.srcset) {\r\n      return;\r\n    }\r\n\r\n    const image = /** @type HTMLImageElement */ (this.element);\r\n    const sizesWidth = this.instance.applyFilters(\r\n      'srcsetSizesWidth',\r\n      this.displayedImageWidth,\r\n      this\r\n    );\r\n\r\n    if (\r\n      !image.dataset.largestUsedSize\r\n      || sizesWidth > parseInt(image.dataset.largestUsedSize, 10)\r\n    ) {\r\n      image.sizes = sizesWidth + 'px';\r\n      image.dataset.largestUsedSize = String(sizesWidth);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If content should use a placeholder (from msrc by default)\r\n   */\r\n  usePlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'useContentPlaceholder',\r\n      this.isImageContent(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Preload content with lazy-loading param\r\n   */\r\n  lazyLoad() {\r\n    if (this.instance.dispatch('contentLazyLoad', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.load(true);\r\n  }\r\n\r\n  /**\r\n   * @returns {boolean} If placeholder should be kept after content is loaded\r\n   */\r\n  keepPlaceholder() {\r\n    return this.instance.applyFilters(\r\n      'isKeepingPlaceholder',\r\n      this.isLoading(),\r\n      this\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy the content\r\n   */\r\n  destroy() {\r\n    this.hasSlide = false;\r\n    this.slide = undefined;\r\n\r\n    if (this.instance.dispatch('contentDestroy', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    this.remove();\r\n\r\n    if (this.placeholder) {\r\n      this.placeholder.destroy();\r\n      this.placeholder = undefined;\r\n    }\r\n\r\n    if (this.isImageContent() && this.element) {\r\n      this.element.onload = null;\r\n      this.element.onerror = null;\r\n      this.element = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display error message\r\n   */\r\n  displayError() {\r\n    if (this.slide) {\r\n      let errorMsgEl = createElement('pswp__error-msg', 'div');\r\n      errorMsgEl.innerText = this.instance.options?.errorMsg ?? '';\r\n      errorMsgEl = /** @type {HTMLDivElement} */ (this.instance.applyFilters(\r\n        'contentErrorElement',\r\n        errorMsgEl,\r\n        this\r\n      ));\r\n      this.element = createElement('pswp__content pswp__error-msg-container', 'div');\r\n      this.element.appendChild(errorMsgEl);\r\n      this.slide.container.innerText = '';\r\n      this.slide.container.appendChild(this.element);\r\n      this.slide.updateContentSize(true);\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the content\r\n   */\r\n  append() {\r\n    if (this.isAttached || !this.element) {\r\n      return;\r\n    }\r\n\r\n    this.isAttached = true;\r\n\r\n    if (this.state === LOAD_STATE.ERROR) {\r\n      this.displayError();\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppend', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const supportsDecode = ('decode' in this.element);\r\n\r\n    if (this.isImageContent()) {\r\n      // Use decode() on nearby slides\r\n      //\r\n      // Nearby slide images are in DOM and not hidden via display:none.\r\n      // However, they are placed offscreen (to the left and right side).\r\n      //\r\n      // Some browsers do not composite the image until it's actually visible,\r\n      // using decode() helps.\r\n      //\r\n      // You might ask \"why dont you just decode() and then append all images\",\r\n      // that's because I want to show image before it's fully loaded,\r\n      // as browser can render parts of image while it is loading.\r\n      // We do not do this in Safari due to partial loading bug.\r\n      if (supportsDecode && this.slide && (!this.slide.isActive || isSafari())) {\r\n        this.isDecoding = true;\r\n        // purposefully using finally instead of then,\r\n        // as if srcset sizes changes dynamically - it may cause decode error\r\n        /** @type {HTMLImageElement} */\r\n        (this.element).decode().catch(() => {}).finally(() => {\r\n          this.isDecoding = false;\r\n          this.appendImage();\r\n        });\r\n      } else {\r\n        this.appendImage();\r\n      }\r\n    } else if (this.slide && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate the slide,\r\n   * active slide is generally the current one,\r\n   * meaning the user can see it.\r\n   */\r\n  activate() {\r\n    if (this.instance.dispatch('contentActivate', { content: this }).defaultPrevented\r\n      || !this.slide) {\r\n      return;\r\n    }\r\n\r\n    if (this.isImageContent() && this.isDecoding && !isSafari()) {\r\n      // add image to slide when it becomes active,\r\n      // even if it's not finished decoding\r\n      this.appendImage();\r\n    } else if (this.isError()) {\r\n      this.load(false, true); // try to reload\r\n    }\r\n\r\n    if (this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'false');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Deactivate the content\r\n   */\r\n  deactivate() {\r\n    this.instance.dispatch('contentDeactivate', { content: this });\r\n    if (this.slide && this.slide.holderElement) {\r\n      this.slide.holderElement.setAttribute('aria-hidden', 'true');\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Remove the content from DOM\r\n   */\r\n  remove() {\r\n    this.isAttached = false;\r\n\r\n    if (this.instance.dispatch('contentRemove', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    if (this.element && this.element.parentNode) {\r\n      this.element.remove();\r\n    }\r\n\r\n    if (this.placeholder && this.placeholder.element) {\r\n      this.placeholder.element.remove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append the image content to slide container\r\n   */\r\n  appendImage() {\r\n    if (!this.isAttached) {\r\n      return;\r\n    }\r\n\r\n    if (this.instance.dispatch('contentAppendImage', { content: this }).defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    // ensure that element exists and is not already appended\r\n    if (this.slide && this.element && !this.element.parentNode) {\r\n      this.slide.container.appendChild(this.element);\r\n    }\r\n\r\n    if (this.state === LOAD_STATE.LOADED || this.state === LOAD_STATE.ERROR) {\r\n      this.removePlaceholder();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Content;\r\n", "/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {PhotoSwipeBase} pswp\r\n * @returns {Point}\r\n */\r\nexport function getViewportSize(options, pswp) {\r\n  if (options.getViewportSizeFn) {\r\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\r\n    if (newViewportSize) {\r\n      return newViewportSize;\r\n    }\r\n  }\r\n\r\n  return {\r\n    x: document.documentElement.clientWidth,\r\n\r\n    // TODO: height on mobile is very incosistent due to toolbar\r\n    // find a way to improve this\r\n    //\r\n    // document.documentElement.clientHeight - doesn't seem to work well\r\n    y: window.innerHeight\r\n  };\r\n}\r\n\r\n/**\r\n * Parses padding option.\r\n * Supported formats:\r\n *\r\n * // Object\r\n * padding: {\r\n *  top: 0,\r\n *  bottom: 0,\r\n *  left: 0,\r\n *  right: 0\r\n * }\r\n *\r\n * // A function that returns the object\r\n * paddingFn: (viewportSize, itemData, index) => {\r\n *  return {\r\n *    top: 0,\r\n *    bottom: 0,\r\n *    left: 0,\r\n *    right: 0\r\n *  };\r\n * }\r\n *\r\n * // Legacy variant\r\n * paddingLeft: 0,\r\n * paddingRight: 0,\r\n * paddingTop: 0,\r\n * paddingBottom: 0,\r\n *\r\n * @param {'left' | 'top' | 'bottom' | 'right'} prop\r\n * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n * @param {Point} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {number} index Slide index\r\n * @returns {number}\r\n */\r\nexport function parsePaddingOption(prop, options, viewportSize, itemData, index) {\r\n  let paddingValue = 0;\r\n\r\n  if (options.paddingFn) {\r\n    paddingValue = options.paddingFn(viewportSize, itemData, index)[prop];\r\n  } else if (options.padding) {\r\n    paddingValue = options.padding[prop];\r\n  } else {\r\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\r\n    // @ts-expect-error\r\n    if (options[legacyPropName]) {\r\n      // @ts-expect-error\r\n      paddingValue = options[legacyPropName];\r\n    }\r\n  }\r\n\r\n  return Number(paddingValue) || 0;\r\n}\r\n\r\n/**\r\n * @param {PhotoSwipeOptions} options\r\n * @param {Point} viewportSize\r\n * @param {SlideData} itemData\r\n * @param {number} index\r\n * @returns {Point}\r\n */\r\nexport function getPanAreaSize(options, viewportSize, itemData, index) {\r\n  return {\r\n    x: viewportSize.x\r\n      - parsePaddingOption('left', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('right', options, viewportSize, itemData, index),\r\n    y: viewportSize.y\r\n      - parsePaddingOption('top', options, viewportSize, itemData, index)\r\n      - parsePaddingOption('bottom', options, viewportSize, itemData, index)\r\n  };\r\n}\r\n", "const MAX_IMAGE_WIDTH = 4000;\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/slide.js').SlideData} SlideData */\r\n\r\n/** @typedef {'fit' | 'fill' | number | ((zoomLevelObject: ZoomLevel) => number)} ZoomLevelOption */\r\n\r\n/**\r\n * Calculates zoom levels for specific slide.\r\n * Depends on viewport size and image size.\r\n */\r\nclass ZoomLevel {\r\n  /**\r\n   * @param {PhotoSwipeOptions} options PhotoSwipe options\r\n   * @param {SlideData} itemData Slide data\r\n   * @param {number} index Slide index\r\n   * @param {PhotoSwipe} [pswp] PhotoSwipe instance, can be undefined if not initialized yet\r\n   */\r\n  constructor(options, itemData, index, pswp) {\r\n    this.pswp = pswp;\r\n    this.options = options;\r\n    this.itemData = itemData;\r\n    this.index = index;\r\n    /** @type { Point | null } */\r\n    this.panAreaSize = null;\r\n    /** @type { Point | null } */\r\n    this.elementSize = null;\r\n    this.fit = 1;\r\n    this.fill = 1;\r\n    this.vFill = 1;\r\n    this.initial = 1;\r\n    this.secondary = 1;\r\n    this.max = 1;\r\n    this.min = 1;\r\n  }\r\n\r\n  /**\r\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\r\n   *\r\n   * It should be called when either image or viewport size changes.\r\n   *\r\n   * @param {number} maxWidth\r\n   * @param {number} maxHeight\r\n   * @param {Point} panAreaSize\r\n   */\r\n  update(maxWidth, maxHeight, panAreaSize) {\r\n    /** @type {Point} */\r\n    const elementSize = { x: maxWidth, y: maxHeight };\r\n    this.elementSize = elementSize;\r\n    this.panAreaSize = panAreaSize;\r\n\r\n    const hRatio = panAreaSize.x / elementSize.x;\r\n    const vRatio = panAreaSize.y / elementSize.y;\r\n\r\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\r\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\r\n\r\n    // zoom.vFill defines zoom level of the image\r\n    // when it has 100% of viewport vertical space (height)\r\n    this.vFill = Math.min(1, vRatio);\r\n\r\n    this.initial = this._getInitial();\r\n    this.secondary = this._getSecondary();\r\n    this.max = Math.max(\r\n      this.initial,\r\n      this.secondary,\r\n      this._getMax()\r\n    );\r\n\r\n    this.min = Math.min(\r\n      this.fit,\r\n      this.initial,\r\n      this.secondary\r\n    );\r\n\r\n    if (this.pswp) {\r\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses user-defined zoom option.\r\n   *\r\n   * @private\r\n   * @param {'initial' | 'secondary' | 'max'} optionPrefix Zoom level option prefix (initial, secondary, max)\r\n   * @returns { number | undefined }\r\n   */\r\n  _parseZoomLevelOption(optionPrefix) {\r\n    const optionName = /** @type {'initialZoomLevel' | 'secondaryZoomLevel' | 'maxZoomLevel'} */ (\r\n      optionPrefix + 'ZoomLevel'\r\n    );\r\n    const optionValue = this.options[optionName];\r\n\r\n    if (!optionValue) {\r\n      return;\r\n    }\r\n\r\n    if (typeof optionValue === 'function') {\r\n      return optionValue(this);\r\n    }\r\n\r\n    if (optionValue === 'fill') {\r\n      return this.fill;\r\n    }\r\n\r\n    if (optionValue === 'fit') {\r\n      return this.fit;\r\n    }\r\n\r\n    return Number(optionValue);\r\n  }\r\n\r\n  /**\r\n   * Get zoom level to which image will be zoomed after double-tap gesture,\r\n   * or when user clicks on zoom icon,\r\n   * or mouse-click on image itself.\r\n   * If you return 1 image will be zoomed to its original size.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getSecondary() {\r\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\r\n\r\n    if (currZoomLevel) {\r\n      return currZoomLevel;\r\n    }\r\n\r\n    // 3x of \"fit\" state, but not larger than original\r\n    currZoomLevel = Math.min(1, this.fit * 3);\r\n\r\n    if (this.elementSize && currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\r\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\r\n    }\r\n\r\n    return currZoomLevel;\r\n  }\r\n\r\n  /**\r\n   * Get initial image zoom level.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getInitial() {\r\n    return this._parseZoomLevelOption('initial') || this.fit;\r\n  }\r\n\r\n  /**\r\n   * Maximum zoom level when user zooms\r\n   * via zoom/pinch gesture,\r\n   * via cmd/ctrl-wheel or via trackpad.\r\n   *\r\n   * @private\r\n   * @return {number}\r\n   */\r\n  _getMax() {\r\n    // max zoom level is x4 from \"fit state\",\r\n    // used for zoom gesture and ctrl/trackpad zoom\r\n    return this._parseZoomLevelOption('max') || Math.max(1, this.fit * 4);\r\n  }\r\n}\r\n\r\nexport default ZoomLevel;\r\n", "import { getViewportSize, getPanAreaSize } from '../util/viewport-size.js';\r\nimport ZoomLevel from './zoom-level.js';\r\n\r\n/** @typedef {import('./content.js').default} Content */\r\n/** @typedef {import('./slide.js').default} Slide */\r\n/** @typedef {import('./slide.js').SlideData} SlideData */\r\n/** @typedef {import('../core/base.js').default} PhotoSwipeBase */\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n\r\nconst MIN_SLIDES_TO_CACHE = 5;\r\n\r\n/**\r\n * Lazy-load an image\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * @param {SlideData} itemData Data about the slide\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\r\n * @param {number} index\r\n * @returns {Content} Image that is being decoded or false.\r\n */\r\nexport function lazyLoadData(itemData, instance, index) {\r\n  const content = instance.createContentFromData(itemData, index);\r\n  /** @type {ZoomLevel | undefined} */\r\n  let zoomLevel;\r\n\r\n  const { options } = instance;\r\n\r\n  // We need to know dimensions of the image to preload it,\r\n  // as it might use srcset, and we need to define sizes\r\n  if (options) {\r\n    zoomLevel = new ZoomLevel(options, itemData, -1);\r\n\r\n    let viewportSize;\r\n    if (instance.pswp) {\r\n      viewportSize = instance.pswp.viewportSize;\r\n    } else {\r\n      viewportSize = getViewportSize(options, instance);\r\n    }\r\n\r\n    const panAreaSize = getPanAreaSize(options, viewportSize, itemData, index);\r\n    zoomLevel.update(content.width, content.height, panAreaSize);\r\n  }\r\n\r\n  content.lazyLoad();\r\n\r\n  if (zoomLevel) {\r\n    content.setDisplayedSize(\r\n      Math.ceil(content.width * zoomLevel.initial),\r\n      Math.ceil(content.height * zoomLevel.initial)\r\n    );\r\n  }\r\n\r\n  return content;\r\n}\r\n\r\n\r\n/**\r\n * Lazy-loads specific slide.\r\n * This function is used both by Lightbox and PhotoSwipe core,\r\n * thus it can be called before dialog is opened.\r\n *\r\n * By default, it loads image based on viewport size and initial zoom level.\r\n *\r\n * @param {number} index Slide index\r\n * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox eventable instance\r\n * @returns {Content | undefined}\r\n */\r\nexport function lazyLoadSlide(index, instance) {\r\n  const itemData = instance.getItemData(index);\r\n\r\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\r\n    return;\r\n  }\r\n\r\n  return lazyLoadData(itemData, instance, index);\r\n}\r\n\r\nclass ContentLoader {\r\n  /**\r\n   * @param {PhotoSwipe} pswp\r\n   */\r\n  constructor(pswp) {\r\n    this.pswp = pswp;\r\n    // Total amount of cached images\r\n    this.limit = Math.max(\r\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\r\n      MIN_SLIDES_TO_CACHE\r\n    );\r\n    /** @type {Content[]} */\r\n    this._cachedItems = [];\r\n  }\r\n\r\n  /**\r\n   * Lazy load nearby slides based on `preload` option.\r\n   *\r\n   * @param {number} [diff] Difference between slide indexes that was changed recently, or 0.\r\n   */\r\n  updateLazy(diff) {\r\n    const { pswp } = this;\r\n\r\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\r\n      return;\r\n    }\r\n\r\n    const { preload } = pswp.options;\r\n    const isForward = diff === undefined ? true : (diff >= 0);\r\n    let i;\r\n\r\n    // preload[1] - num items to preload in forward direction\r\n    for (i = 0; i <= preload[1]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\r\n    }\r\n\r\n    // preload[0] - num items to preload in backward direction\r\n    for (i = 1; i <= preload[0]; i++) {\r\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} initialIndex\r\n   */\r\n  loadSlideByIndex(initialIndex) {\r\n    const index = this.pswp.getLoopedIndex(initialIndex);\r\n    // try to get cached content\r\n    let content = this.getContentByIndex(index);\r\n    if (!content) {\r\n      // no cached content, so try to load from scratch:\r\n      content = lazyLoadSlide(index, this.pswp);\r\n      // if content can be loaded, add it to cache:\r\n      if (content) {\r\n        this.addToCache(content);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Slide} slide\r\n   * @returns {Content}\r\n   */\r\n  getContentBySlide(slide) {\r\n    let content = this.getContentByIndex(slide.index);\r\n    if (!content) {\r\n      // create content if not found in cache\r\n      content = this.pswp.createContentFromData(slide.data, slide.index);\r\n      this.addToCache(content);\r\n    }\r\n\r\n    // assign slide to content\r\n    content.setSlide(slide);\r\n\r\n    return content;\r\n  }\r\n\r\n  /**\r\n   * @param {Content} content\r\n   */\r\n  addToCache(content) {\r\n    // move to the end of array\r\n    this.removeByIndex(content.index);\r\n    this._cachedItems.push(content);\r\n\r\n    if (this._cachedItems.length > this.limit) {\r\n      // Destroy the first content that's not attached\r\n      const indexToRemove = this._cachedItems.findIndex((item) => {\r\n        return !item.isAttached && !item.hasSlide;\r\n      });\r\n      if (indexToRemove !== -1) {\r\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\r\n        removedItem.destroy();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Removes an image from cache, does not destroy() it, just removes.\r\n   *\r\n   * @param {number} index\r\n   */\r\n  removeByIndex(index) {\r\n    const indexToRemove = this._cachedItems.findIndex(item => item.index === index);\r\n    if (indexToRemove !== -1) {\r\n      this._cachedItems.splice(indexToRemove, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} index\r\n   * @returns {Content | undefined}\r\n   */\r\n  getContentByIndex(index) {\r\n    return this._cachedItems.find(content => content.index === index);\r\n  }\r\n\r\n  destroy() {\r\n    this._cachedItems.forEach(content => content.destroy());\r\n    this._cachedItems = [];\r\n  }\r\n}\r\n\r\nexport default ContentLoader;\r\n", "import Eventable from './eventable.js';\r\nimport { getElementsFromOption } from '../util/util.js';\r\nimport Content from '../slide/content.js';\r\nimport { lazyLoadData } from '../slide/loader.js';\r\n\r\n/** @typedef {import(\"../photoswipe.js\").default} PhotoSwipe */\r\n/** @typedef {import(\"../slide/slide.js\").SlideData} SlideData */\r\n\r\n/**\r\n * PhotoSwipe base class that can retrieve data about every slide.\r\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\r\n */\r\nclass PhotoSwipeBase extends Eventable {\r\n  /**\r\n   * Get total number of slides\r\n   *\r\n   * @returns {number}\r\n   */\r\n  getNumItems() {\r\n    let numItems = 0;\r\n    const dataSource = this.options?.dataSource;\r\n\r\n    if (dataSource && 'length' in dataSource) {\r\n      // may be an array or just object with length property\r\n      numItems = dataSource.length;\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      if (dataSource.items) {\r\n        numItems = dataSource.items.length;\r\n      }\r\n    }\r\n\r\n    // legacy event, before filters were introduced\r\n    const event = this.dispatch('numItems', {\r\n      dataSource,\r\n      numItems\r\n    });\r\n    return this.applyFilters('numItems', event.numItems, dataSource);\r\n  }\r\n\r\n  /**\r\n   * @param {SlideData} slideData\r\n   * @param {number} index\r\n   * @returns {Content}\r\n   */\r\n  createContentFromData(slideData, index) {\r\n    return new Content(slideData, this, index);\r\n  }\r\n\r\n  /**\r\n   * Get item data by index.\r\n   *\r\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\r\n   * For example, it may contain properties like\r\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\r\n   *\r\n   * @param {number} index\r\n   * @returns {SlideData}\r\n   */\r\n  getItemData(index) {\r\n    const dataSource = this.options?.dataSource;\r\n    /** @type {SlideData | HTMLElement} */\r\n    let dataSourceItem = {};\r\n    if (Array.isArray(dataSource)) {\r\n      // Datasource is an array of elements\r\n      dataSourceItem = dataSource[index];\r\n    } else if (dataSource && 'gallery' in dataSource) {\r\n      // dataSource has gallery property,\r\n      // thus it was created by Lightbox, based on\r\n      // gallery and children options\r\n\r\n      // query DOM elements\r\n      if (!dataSource.items) {\r\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\r\n      }\r\n\r\n      dataSourceItem = dataSource.items[index];\r\n    }\r\n\r\n    let itemData = dataSourceItem;\r\n\r\n    if (itemData instanceof Element) {\r\n      itemData = this._domElementToItemData(itemData);\r\n    }\r\n\r\n    // Dispatching the itemData event,\r\n    // it's a legacy verion before filters were introduced\r\n    const event = this.dispatch('itemData', {\r\n      itemData: itemData || {},\r\n      index\r\n    });\r\n\r\n    return this.applyFilters('itemData', event.itemData, index);\r\n  }\r\n\r\n  /**\r\n   * Get array of gallery DOM elements,\r\n   * based on childSelector and gallery element.\r\n   *\r\n   * @param {HTMLElement} galleryElement\r\n   * @returns {HTMLElement[]}\r\n   */\r\n  _getGalleryDOMElements(galleryElement) {\r\n    if (this.options?.children || this.options?.childSelector) {\r\n      return getElementsFromOption(\r\n        this.options.children,\r\n        this.options.childSelector,\r\n        galleryElement\r\n      ) || [];\r\n    }\r\n\r\n    return [galleryElement];\r\n  }\r\n\r\n  /**\r\n   * Converts DOM element to item data object.\r\n   *\r\n   * @param {HTMLElement} element DOM element\r\n   * @returns {SlideData}\r\n   */\r\n  _domElementToItemData(element) {\r\n    /** @type {SlideData} */\r\n    const itemData = {\r\n      element\r\n    };\r\n\r\n    const linkEl = /** @type {HTMLAnchorElement} */ (\r\n      element.tagName === 'A'\r\n        ? element\r\n        : element.querySelector('a')\r\n    );\r\n\r\n    if (linkEl) {\r\n      // src comes from data-pswp-src attribute,\r\n      // if it's empty link href is used\r\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\r\n\r\n      if (linkEl.dataset.pswpSrcset) {\r\n        itemData.srcset = linkEl.dataset.pswpSrcset;\r\n      }\r\n\r\n      itemData.width = linkEl.dataset.pswpWidth ? parseInt(linkEl.dataset.pswpWidth, 10) : 0;\r\n      itemData.height = linkEl.dataset.pswpHeight ? parseInt(linkEl.dataset.pswpHeight, 10) : 0;\r\n\r\n      // support legacy w & h properties\r\n      itemData.w = itemData.width;\r\n      itemData.h = itemData.height;\r\n\r\n      if (linkEl.dataset.pswpType) {\r\n        itemData.type = linkEl.dataset.pswpType;\r\n      }\r\n\r\n      const thumbnailEl = element.querySelector('img');\r\n\r\n      if (thumbnailEl) {\r\n        // msrc is URL to placeholder image that's displayed before large image is loaded\r\n        // by default it's displayed only for the first slide\r\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\r\n        itemData.alt = thumbnailEl.getAttribute('alt') ?? '';\r\n      }\r\n\r\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\r\n        itemData.thumbCropped = true;\r\n      }\r\n    }\r\n\r\n    return this.applyFilters('domItemData', itemData, element, linkEl);\r\n  }\r\n\r\n  /**\r\n   * Lazy-load by slide data\r\n   *\r\n   * @param {SlideData} itemData Data about the slide\r\n   * @param {number} index\r\n   * @returns {Content} Image that is being decoded or false.\r\n   */\r\n  lazyLoadData(itemData, index) {\r\n    return lazyLoadData(itemData, this, index);\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeBase;\r\n", "import {\r\n  specialKeyUsed,\r\n  getElementsFromOption,\r\n  isPswpClass\r\n} from '../util/util.js';\r\n\r\nimport PhotoSwipeBase from '../core/base.js';\r\nimport { lazyLoadSlide } from '../slide/loader.js';\r\n\r\n/**\r\n * @template T\r\n * @typedef {import('../types.js').Type<T>} Type<T>\r\n */\r\n\r\n/** @typedef {import('../photoswipe.js').default} PhotoSwipe */\r\n/** @typedef {import('../photoswipe.js').PhotoSwipeOptions} PhotoSwipeOptions */\r\n/** @typedef {import('../photoswipe.js').DataSource} DataSource */\r\n/** @typedef {import('../photoswipe.js').Point} Point */\r\n/** @typedef {import('../slide/content.js').default} Content */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeEventsMap} PhotoSwipeEventsMap */\r\n/** @typedef {import('../core/eventable.js').PhotoSwipeFiltersMap} PhotoSwipeFiltersMap */\r\n\r\n/**\r\n * @template {keyof PhotoSwipeEventsMap} T\r\n * @typedef {import('../core/eventable.js').EventCallback<T>} EventCallback<T>\r\n */\r\n\r\n/**\r\n * PhotoSwipe Lightbox\r\n *\r\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\r\n * - Binds click event to links that should open PhotoSwipe\r\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\r\n * - Initializes PhotoSwipe\r\n *\r\n *\r\n * Loader options use the same object as PhotoSwipe, and supports such options:\r\n *\r\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\r\n * children - Element | Element[] | NodeList | string selector for the gallery children\r\n *\r\n */\r\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\r\n  /**\r\n   * @param {PhotoSwipeOptions} [options]\r\n   */\r\n  constructor(options) {\r\n    super();\r\n    /** @type {PhotoSwipeOptions} */\r\n    this.options = options || {};\r\n    this._uid = 0;\r\n    this.shouldOpen = false;\r\n    /**\r\n     * @private\r\n     * @type {Content | undefined}\r\n     */\r\n    this._preloadedContent = undefined;\r\n\r\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Initialize lightbox, should be called only once.\r\n   * It's not included in the main constructor, so you may bind events before it.\r\n   */\r\n  init() {\r\n    // Bind click events to each gallery\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @param {MouseEvent} e\r\n   */\r\n  onThumbnailsClick(e) {\r\n    // Exit and allow default browser action if:\r\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\r\n        || window.pswp) { // ... if PhotoSwipe is already open\r\n      return;\r\n    }\r\n\r\n    // If both clientX and clientY are 0 or not defined,\r\n    // the event is likely triggered by keyboard,\r\n    // so we do not pass the initialPoint\r\n    //\r\n    // Note that some screen readers emulate the mouse position,\r\n    // so it's not the ideal way to detect them.\r\n    //\r\n    /** @type {Point | null} */\r\n    let initialPoint = { x: e.clientX, y: e.clientY };\r\n\r\n    if (!initialPoint.x && !initialPoint.y) {\r\n      initialPoint = null;\r\n    }\r\n\r\n    let clickedIndex = this.getClickedIndex(e);\r\n    clickedIndex = this.applyFilters('clickedIndex', clickedIndex, e, this);\r\n    /** @type {DataSource} */\r\n    const dataSource = {\r\n      gallery: /** @type {HTMLElement} */ (e.currentTarget)\r\n    };\r\n\r\n    if (clickedIndex >= 0) {\r\n      e.preventDefault();\r\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index of gallery item that was clicked.\r\n   *\r\n   * @param {MouseEvent} e click event\r\n   * @returns {number}\r\n   */\r\n  getClickedIndex(e) {\r\n    // legacy option\r\n    if (this.options.getClickedIndexFn) {\r\n      return this.options.getClickedIndexFn.call(this, e);\r\n    }\r\n\r\n    const clickedTarget = /** @type {HTMLElement} */ (e.target);\r\n    const childElements = getElementsFromOption(\r\n      this.options.children,\r\n      this.options.childSelector,\r\n      /** @type {HTMLElement} */ (e.currentTarget)\r\n    );\r\n    const clickedChildIndex = childElements.findIndex(\r\n      child => child === clickedTarget || child.contains(clickedTarget)\r\n    );\r\n\r\n    if (clickedChildIndex !== -1) {\r\n      return clickedChildIndex;\r\n    } else if (this.options.children || this.options.childSelector) {\r\n      // click wasn't on a child element\r\n      return -1;\r\n    }\r\n\r\n    // There is only one item (which is the gallery)\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Load and open PhotoSwipe\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} dataSource\r\n   * @param {Point | null} [initialPoint]\r\n   * @returns {boolean}\r\n   */\r\n  loadAndOpen(index, dataSource, initialPoint) {\r\n    // Check if the gallery is already open\r\n    if (window.pswp) {\r\n      return false;\r\n    }\r\n\r\n    // set initial index\r\n    this.options.index = index;\r\n\r\n    // define options for PhotoSwipe constructor\r\n    this.options.initialPointerPos = initialPoint;\r\n\r\n    this.shouldOpen = true;\r\n    this.preload(index, dataSource);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Load the main module and the slide content by index\r\n   *\r\n   * @param {number} index\r\n   * @param {DataSource} [dataSource]\r\n   */\r\n  preload(index, dataSource) {\r\n    const { options } = this;\r\n\r\n    if (dataSource) {\r\n      options.dataSource = dataSource;\r\n    }\r\n\r\n    // Add the main module\r\n    /** @type {Promise<Type<PhotoSwipe>>[]} */\r\n    const promiseArray = [];\r\n\r\n    const pswpModuleType = typeof options.pswpModule;\r\n    if (isPswpClass(options.pswpModule)) {\r\n      promiseArray.push(Promise.resolve(/** @type {Type<PhotoSwipe>} */ (options.pswpModule)));\r\n    } else if (pswpModuleType === 'string') {\r\n      throw new Error('pswpModule as string is no longer supported');\r\n    } else if (pswpModuleType === 'function') {\r\n      promiseArray.push(/** @type {() => Promise<Type<PhotoSwipe>>} */ (options.pswpModule)());\r\n    } else {\r\n      throw new Error('pswpModule is not valid');\r\n    }\r\n\r\n    // Add custom-defined promise, if any\r\n    if (typeof options.openPromise === 'function') {\r\n      // allow developers to perform some task before opening\r\n      promiseArray.push(options.openPromise());\r\n    }\r\n\r\n    if (options.preloadFirstSlide !== false && index >= 0) {\r\n      this._preloadedContent = lazyLoadSlide(index, this);\r\n    }\r\n\r\n    // Wait till all promises resolve and open PhotoSwipe\r\n    const uid = ++this._uid;\r\n    Promise.all(promiseArray).then((iterableModules) => {\r\n      if (this.shouldOpen) {\r\n        const mainModule = iterableModules[0];\r\n        this._openPhotoswipe(mainModule, uid);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Type<PhotoSwipe> | { default: Type<PhotoSwipe> }} module\r\n   * @param {number} uid\r\n   */\r\n  _openPhotoswipe(module, uid) {\r\n    // Cancel opening if UID doesn't match the current one\r\n    // (if user clicked on another gallery item before current was loaded).\r\n    //\r\n    // Or if shouldOpen flag is set to false\r\n    // (developer may modify it via public API)\r\n    if (uid !== this._uid && this.shouldOpen) {\r\n      return;\r\n    }\r\n\r\n    this.shouldOpen = false;\r\n\r\n    // PhotoSwipe is already open\r\n    if (window.pswp) {\r\n      return;\r\n    }\r\n\r\n    /**\r\n     * Pass data to PhotoSwipe and open init\r\n     *\r\n     * @type {PhotoSwipe}\r\n     */\r\n    const pswp = typeof module === 'object'\r\n        ? new module.default(this.options) // eslint-disable-line\r\n        : new module(this.options); // eslint-disable-line\r\n\r\n    this.pswp = pswp;\r\n    window.pswp = pswp;\r\n\r\n    // map listeners from Lightbox to PhotoSwipe Core\r\n    /** @type {(keyof PhotoSwipeEventsMap)[]} */\r\n    (Object.keys(this._listeners)).forEach((name) => {\r\n      this._listeners[name]?.forEach((fn) => {\r\n        pswp.on(name, /** @type {EventCallback<typeof name>} */(fn));\r\n      });\r\n    });\r\n\r\n    // same with filters\r\n    /** @type {(keyof PhotoSwipeFiltersMap)[]} */\r\n    (Object.keys(this._filters)).forEach((name) => {\r\n      this._filters[name]?.forEach((filter) => {\r\n        pswp.addFilter(name, filter.fn, filter.priority);\r\n      });\r\n    });\r\n\r\n    if (this._preloadedContent) {\r\n      pswp.contentLoader.addToCache(this._preloadedContent);\r\n      this._preloadedContent = undefined;\r\n    }\r\n\r\n    pswp.on('destroy', () => {\r\n      // clean up public variables\r\n      this.pswp = undefined;\r\n      delete window.pswp;\r\n    });\r\n\r\n    pswp.init();\r\n  }\r\n\r\n  /**\r\n   * Unbinds all events, closes PhotoSwipe if it's open.\r\n   */\r\n  destroy() {\r\n    this.pswp?.destroy();\r\n\r\n    this.shouldOpen = false;\r\n    this._listeners = {};\r\n\r\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\r\n      .forEach((galleryElement) => {\r\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\r\n      });\r\n  }\r\n}\r\n\r\nexport default PhotoSwipeLightbox;\r\n"],
  "mappings": "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",
  "names": []
}
